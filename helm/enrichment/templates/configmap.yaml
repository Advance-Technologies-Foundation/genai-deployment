apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "enrichment.fullname" . }}
  labels:
    app: {{ template "enrichment.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
data:
  applicationConfig: |
    {
        "Logging": {
            "LogLevel": {
                "Default": "Debug",
                "Terrasoft.AI.Utils.Authentication": "Warning",
                "System.Net.Http.HttpClient.IOpenAIService.ClientHandler": "Warning",
                "Microsoft.*": "Warning"
            }
        },
        "ConnectionStrings": {
            "NameDictionaryDb": "Data Source=|DataDirectory|/db/Names.db;Version=3;New=False;FailIfMissing=True;Read Only=True;"
            {{- if eq .Values.appConfig.redis.enabled true }}
            ,"Redis": "{{ .Values.appConfig.redis.host }}"
            {{- end}}
        },
        "AccountManagementBaseServiceUrl": "{{ .Values.appConfig.accountManagementBaseServiceUrl }}",
        "WebScraper_ContactPageKeywords":  "contact,contacts,contactus,contact-us,contact_us,kontakty,kontaktyi,kontakt,kontakti,контакты,contacto,kontakto,contactez,contactes,kontakte,contactos,contactar,contatti,contatto,contatta,feedback,about,aboutus,about-us,abaut",
        "WebScraper_PhoneNumberRegions": "US,RU,UA,UK,KZ,IT,ES,FR",
        {{- if .Values.spacy.enabled }}
        "KnitEngine_Spacy_ServiceUrl": "http://{{ template "enrichment.fullname" . }}-spacy-ner:{{ .Values.spacy.service.port }}",
        "KnitEngine_Spacy_TimeoutSec": "{{ .Values.appConfig.knitEngine.spacy.timeoutSec }}",
        {{- end }}
        // Max request body size (bytes). Exceeding this limit will cause 500 error.
        "MaxRequestBodySize": 20000000,

        // Max size of a single text, that can be parsed (symbols). Exceeding this limit will cause 500 error.
        "MaxSingleTextSize": 200000,

        // Max size of content that NER service can consume by one request (symbols). All extra content will be cut.
        "MaxNerContentSize": 1000,

        // Clearbit Autocomplete Service
        "ClearbitAutocompleteApiBaseUrl": "https://autocomplete.clearbit.com/v1/companies",

        // Mock Server URL
        "MockServerUrl": "{{ .Values.appConfig.mockServerUrl }}",

        // Generative AI settings
        "GenAI": {
            "ProviderType": {{ include "enrichment.providerType" . }},
            "CustomDomain": "{{ include "enrichment.llmDomainUrl" . }}",
            "DefaultModel": "{{ include "enrichment.defaultModel" . }}",
            "EmbeddingsModel": "{{ include "enrichment.embeddingsModel" . }}",
            "GenEntitiesPrompt": "{{ .Values.appConfig.genAI.genEntitiesPrompt }}",
            "GenDcmPrompt": "{{ .Values.appConfig.genAI.genDcmPrompt }}",
            "GenDataPrompt": "{{ .Values.appConfig.genAI.genDataPrompt }}",
            "GenEntitiesMockRequestQuery": "{{ .Values.appConfig.genAI.genEntitiesMockRequestQuery }}",
            "OpenAIRetryOnFailureCount":"{{ .Values.appConfig.genAI.openAIRetryOnFailureCount }}",
            "OpenAIRetryIntervalSeconds":"{{ .Values.appConfig.genAI.openAIRetryIntervalSeconds }}",
            "OpenAIHttpClientTimeoutSec":"{{ .Values.appConfig.genAI.openAIHttpClientTimeoutSec }}",
            "MaxRequestsPerHour": {{ .Values.appConfig.genAI.maxRequestsPerHour | int }},
            "MaxRequestsPerDay": {{ .Values.appConfig.genAI.maxRequestsPerDay | int }},
            "MaxRequestsPerMonth": {{ .Values.appConfig.genAI.maxRequestsPerMonth | int }},
            "MaxTokensPerMonth": {{ .Values.appConfig.genAI.maxTokensPerMonth | int }},
            "MaxTokensPerDay": {{ .Values.appConfig.genAI.maxTokensPerDay | int }},
            "MaxTokensPerHour": {{ .Values.appConfig.genAI.maxTokensPerHour | int }},
            "MaxTokensPerMinute": {{ .Values.appConfig.genAI.maxTokensPerMinute | int }},
            "MaxTotalTokens": {{ .Values.appConfig.genAI.maxTotalTokens | int }},
            "TotalTokensLimitId": "{{ .Values.appConfig.genAI.totalTokensLimitId }}",
            "MaxQueryText": {{ .Values.appConfig.genAI.maxQueryText }},
            "StoreSensitiveFieldsInStats": {{ .Values.appConfig.genAI.storeSensitiveFieldsInStats }},
            {{- if .Values.appConfig.genAI.defaultSeed }}
            "DefaultSeed": {{ .Values.appConfig.genAI.defaultSeed | int }},
            {{- end }}
            {{- if eq .Values.appConfig.genAI.llmProviders.type "azure" }}
            "AzureDeploymentId": "{{ include "enrichment.azureDeploymentId" . }}",
            "AzureResourceName": "{{ include "enrichment.azureResourceName" . }}",
            "OpenAIApiKey": "{{ include "enrichment.openAIApiKey" . }}"
            {{- end }}
        },

        "UsageLimitsRetrieverOptions": {
          "Enabled": {{ .Values.usageLimitsRetriever.enabled }},
          "LimitsProviderServiceUrl": "{{ .Values.usageLimitsRetriever.limitsProviderServiceUrl }}",
          "ClientLimitEndpoint": "{{ .Values.usageLimitsRetriever.clientLimitEndpoint }}",
          "IdentityServiceTokenUrl": "{{ .Values.usageLimitsRetriever.identityServiceTokenUrl }}",
          "ClientId": "{{ .Values.usageLimitsRetriever.clientId }}",
          "ClientSecret": "{{ .Values.usageLimitsRetriever.clientSecret }}",
          "CacheLifetimeSec": {{ .Values.usageLimitsRetriever.cacheLifetimeSec | int }},
          "RequestTimeoutSec": {{ .Values.usageLimitsRetriever.requestTimeoutSec | int }}
        },

        // The minimum number of worker threads that the thread pool creates on demand
        "MinThreads": {{ .Values.appConfig.minThreads | int }},

        // Log trace info
        "TraceDebugInfo": {{ .Values.appConfig.traceDebugInfo }}
    }
  log4netcfg: |
    <?xml version="1.0" encoding="utf-8"?>
    <log4net>
        {{- if eq .Values.grayLog.enabled true }}
        <appender name="GelfAmqpAppender" type="Gelf4Net.Appender.AsyncGelfAmqpAppender, Gelf4Net.AmqpAppender">
            <remoteAddress value="{{ .Values.grayLog.AMQP.host }}" />
            <useTls value="false" />
            <remotePort value="{{ .Values.grayLog.AMQP.port }}" />
            <username value="{{ .Values.grayLog.AMQP.userName }}" />
            <password value="{{ .Values.grayLog.AMQP.password }}" />
            <virtualHost value="{{ .Values.grayLog.AMQP.virtualHost }}" />
            <exchange value="{{ .Values.grayLog.AMQP.exchange }}" />
            <key value="{{ .Values.grayLog.AMQP.routingKey }}" />
            <layout type="Gelf4Net.Layout.GelfLayout, Gelf4Net.Core">
                <param name="IncludeLocationInformation" value="true" />
            </layout>
        </appender>
        {{- end}}
        <appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">
            <layout type="log4net.Layout.PatternLayout">
              <conversionPattern value="%level %date %logger [%thread] %message %newline" />
            </layout>
        </appender>
        <root>
            <level value="{{ .Values.appConfig.logLevel }}" />
            {{- if eq .Values.grayLog.enabled true }}
            <appender-ref ref="GelfAmqpAppender" />
            {{- end}}
            <appender-ref ref="ConsoleAppender" />
        </root>
    </log4net>
  nginxConfig: |
    upstream backend {
      server {{ template "enrichment.fullname" . }}:80;
    }

    server {
      listen 81 default_server;
      listen [::]:81 default_server;

      server_name _;
      index index.html index.htm;
      error_page 404 /index.html;
      root /usr/share/nginx/html;

      location /ui/ {
        root /usr/share/nginx/html;
      }

      location = /ui {
        return 301 /ui/;
      }

      location /requestStats {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host:$server_port;
        proxy_set_header X-NginX-Proxy true;
        proxy_pass http://backend;
        proxy_redirect off;
      }
    }
